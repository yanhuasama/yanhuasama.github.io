package com;

import java.io.*;
import java.util.*;

public class Huffman {
    static StringBuilder stringBuilder = new StringBuilder();
    static Map<Byte, String> map = new HashMap<Byte, String>();
    static int length;

    public static void main(String args[]) {

        String srcFile="D:\\javaTest\\src.txt";
        String dctFile="D:\\javaTest\\dest.txt";
        String srcFile2="D:\\javaTest\\unZipSrc.txt";
        compress(srcFile,dctFile);
        unZipFile(dctFile,srcFile2);
        System.out.println("~~~~~~~~~");

    }

    public static void unZipFile(String srcFile,String dctFile){
        InputStream is=null;
        ObjectInputStream ois=null;
        OutputStream os=null;
        try{
            is=new FileInputStream(srcFile);
            ois=new ObjectInputStream(is);
            byte[] huffmanBytes=(byte[]) ois.readObject();

//            System.out.println("huffmanLastByte:"+huffmanBytes[huffmanBytes.length-1]);
            Map<Byte,String> huffmanCodes=(Map<Byte,String>)ois.readObject();
            int l=(int)ois.readObject();
            length=l;
            byte[] bytes=decompression(huffmanCodes,huffmanBytes);
            os=new FileOutputStream(dctFile);
            os.write(bytes);
        }catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try {
                is.close();
                os.close();
                ois.close();
            }catch (Exception e){
                System.out.println(e.getMessage());
            }

        }
    }

    public static void compress(String srcFile,String dctFile){
        FileInputStream is=null;
        OutputStream os=null;
        ObjectOutputStream oos=null;

        try{
            is=new FileInputStream(srcFile);
            byte[] b=new byte[is.available()];

            is.read(b);

            byte[] huffmanBytes=huffmanZip(b);
            os=new FileOutputStream(dctFile);
            oos=new ObjectOutputStream(os);
            oos.writeObject(huffmanBytes);
            oos.writeObject(map);
            oos.writeObject(length);
        }catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try {
                is.close();
                os.close();
                oos.close();
            }catch (Exception e){
                System.out.println(e.getMessage());
            }
        }
    }

    public static byte[] decompression(Map<Byte,String> map,byte[] huffmanCodes){
        StringBuilder stringBuilder=new StringBuilder();
        for (int i=0;i<huffmanCodes.length;i++){
            byte b=huffmanCodes[i];
            boolean flag=(i==huffmanCodes.length-1);
//            if (huffmanCodes[huffmanCodes.length-1]>0&&huffmanCodes[huffmanCodes.length-1]<255){
//                flag=false;
//            }else {
//                flag=true;
//            }
            String str=byteToString(b,!flag);
            stringBuilder.append(str);
        }
//        System.out.println("num2:"+stringBuilder);
        Map<String,Byte> map1=new HashMap<String, Byte>();
        for (Map.Entry<Byte,String> map2 :map.entrySet()){
            map1.put(map2.getValue(),map2.getKey());
        }


        List<Byte> list=new ArrayList<Byte>();
        for (int i=0;i<stringBuilder.length();){
            int count=1;
            boolean flag=true;
            Byte b=null;
            String str;

            while (flag){
                str=stringBuilder.substring(i,i+count);
                b=map1.get(str);
                if (b==null){
                    count++;
                }else {
                    flag=false;
                }
            }
            list.add(b);
            i+=count;
        }
        byte[] bytes=new byte[list.size()];
        for (int i=0;i<bytes.length;i++){
            bytes[i]=list.get(i);
        }
        return bytes;
    }

    private static String byteToString(byte b, boolean flag) {
        int temp = b;
        if (flag) {
            temp |= 256;
        }
        String string = Integer.toBinaryString(temp);
//        System.out.println(string);
        if (flag) {
            return string.substring(string.length() - 8);
        }else {
            for (int i=0;i<length;i++){
                string='0'+string;
            }
            return string;
        }
    }

    private static byte[] huffmanZip(byte[] bytes) {
        List<Node> list = getNodes(bytes);
        Node huffmanTree = createHuffmanTree(list);

        Map<Byte, String> getCodes = huffmanCodes(huffmanTree);
//        System.out.println(getCodes);

        byte[] bytes1 = huffmanCodesBytes(getCodes, bytes);
        return bytes1;
    }

    public static byte[] huffmanCodesBytes(Map<Byte, String> map, byte[] bytes) {
        StringBuilder stringBuilder = new StringBuilder();
        for (byte b : bytes) {
            stringBuilder.append(map.get(b));
        }
//        System.out.println("num1:"+stringBuilder);
        int len = (stringBuilder.length() + 7) / 8;
        byte[] bytes1 = new byte[len];
        int index = 0;
        for (int i = 0; i < stringBuilder.length(); i += 8) {
            String string;
            if (i + 8 > stringBuilder.length()) {
                string = stringBuilder.substring(i);
                length=string.indexOf('1');
//                System.out.println("last:"+string);
            } else {
                string = stringBuilder.substring(i, i + 8);
            }
            bytes1[index] = (byte) Integer.parseInt(string, 2);
            index++;
        }
//        System.out.println("lastByte:"+bytes1[bytes1.length-1]);
        return bytes1;
    }

    public static Map<Byte, String> huffmanCodes(Node node) {
        if (node == null) {
            System.out.println("树为空");
            return null;
        } else {
            huffmanCodes(node.left, stringBuilder, "0");
            huffmanCodes(node.right, stringBuilder, "1");
            return map;
        }
    }


    public static Map<Byte, String> huffmanCodes(Node node, StringBuilder stringBuilder, String code) {
        StringBuilder stringBuilder1 = new StringBuilder(stringBuilder);
        stringBuilder1.append(code);
        if (node != null) {
            if (node.data == null) {
                huffmanCodes(node.left, stringBuilder1, "0");
                huffmanCodes(node.right, stringBuilder1, "1");
            } else {
                map.put(node.data, stringBuilder1.toString());
            }
        }
        return map;
    }

    private static void preOrder(Node node) {
        if (node != null) {
            node.preOrder();
        } else {
            System.out.println("树为空");
        }
    }

    public static Node createHuffmanTree(List<Node> nodes) {

        while (nodes.size() > 1) {
            Collections.sort(nodes);
            Node leftNode = nodes.get(0);
            Node rightNode = nodes.get(1);

            Node parent = new Node(null, leftNode.wight + rightNode.wight);

            parent.left = leftNode;
            parent.right = rightNode;

            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parent);


        }
        return nodes.get(0);
    }

    public static List<Node> getNodes(byte[] bytes) {
        List<Node> nodes = new ArrayList<Node>();

        Map<Byte, Integer> map = new HashMap<Byte, Integer>();

        for (byte b : bytes) {
            Integer count = map.get(b);
            if (count == null) {
                map.put(b, 1);
            } else {
                map.put(b, count + 1);
            }
        }

        for (Map.Entry<Byte, Integer> entry : map.entrySet()) {
            nodes.add(new Node(entry.getKey(), entry.getValue()));
        }

        return nodes;
    }
}

//节点类
class Node implements Comparable<Node> {
    Byte data;
    int wight;
    Node left;
    Node right;

    //定义节点
    public Node(Byte data, int wight) {
        this.data = data;
        this.wight = wight;
    }

    //比较排序
    @Override
    public int compareTo(Node o) {
        return this.wight - o.wight;
    }

    //打印
    @Override
    public String toString() {
        return "Node{" +
                "data=" + data +
                ", wight=" + wight +
                '}';
    }

    /**
     * 前序遍历
     * 递归遍历
     */

    public void preOrder() {
        System.out.println(this);
        if (this.left != null) {
            this.left.preOrder();
        }
        if (this.right != null) {
            this.right.preOrder();
        }
    }
}
